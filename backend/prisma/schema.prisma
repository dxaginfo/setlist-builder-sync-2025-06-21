// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User model
model User {
  id           String        @id @default(uuid())
  username     String        @unique
  email        String        @unique
  passwordHash String
  profileImage String?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  songs        Song[]
  setlists     Setlist[]
  collaborator Collaborator[]
}

// Song model
model Song {
  id              String        @id @default(uuid())
  title           String
  artist          String?
  key             String?
  tempo           Int?
  durationSeconds Int?
  lyrics          String?
  chordChart      String?
  notes           String?
  spotifyUri      String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id])
  userId          String
  setlistSongs    SetlistSong[]
  songTags        SongTag[]
  attachments     Attachment[]
}

// Setlist model
model Setlist {
  id            String        @id @default(uuid())
  name          String
  description   String?
  venue         String?
  eventDate     DateTime?
  totalDuration Int?
  isPublic      Boolean       @default(false)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  user          User          @relation(fields: [userId], references: [id])
  userId        String
  setlistSongs  SetlistSong[]
  collaborators Collaborator[]
}

// Junction table for Setlist and Song
model SetlistSong {
  id              String   @id @default(uuid())
  position        Int
  keyOverride     String?
  durationOverride Int?
  notes           String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  setlist         Setlist  @relation(fields: [setlistId], references: [id], onDelete: Cascade)
  setlistId       String
  song            Song     @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId          String

  @@unique([setlistId, position])
}

// Tag model for categorizing songs
model Tag {
  id        String    @id @default(uuid())
  name      String
  color     String?
  createdAt DateTime  @default(now())
  songTags  SongTag[]
}

// Junction table for Song and Tag
model SongTag {
  song   Song   @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId String
  tag    Tag    @relation(fields: [tagId], references: [id], onDelete: Cascade)
  tagId  String

  @@id([songId, tagId])
}

// Collaborator model for setlist sharing
model Collaborator {
  id              String   @id @default(uuid())
  permissionLevel String   // e.g., "read", "write", "admin"
  createdAt       DateTime @default(now())
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId          String
  setlist         Setlist  @relation(fields: [setlistId], references: [id], onDelete: Cascade)
  setlistId       String

  @@unique([userId, setlistId])
}

// Attachment model for storing files related to songs
model Attachment {
  id        String   @id @default(uuid())
  fileName  String
  filePath  String
  fileType  String?
  createdAt DateTime @default(now())
  song      Song     @relation(fields: [songId], references: [id], onDelete: Cascade)
  songId    String
}